<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Firm;
use Doctrine\ORM\EntityRepository;

/**
 * FirmRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FirmRepository extends EntityRepository
{
    /**
     * Return the next firm by ID.
     * 
     * @param Firm $firm
     * @return Firm|Null
     */
    public function next(Firm $firm) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('e.id > :id');
        $qb->setParameter('id', $firm->getId());
        $qb->addOrderBy('e.id', 'ASC');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    /**
     * Return the next firm by ID.
     * 
     * @param Firm $firm
     * @return Firm|Null
     */
    public function previous(Firm $firm) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('e.id < :id');
        $qb->setParameter('id', $firm->getId());
        $qb->addOrderBy('e.id', 'DESC');
        $qb->setMaxResults(1);
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    public function searchQuery($q) {
        $qb = $this->createQueryBuilder('e');
        $qb->where("e.name like '%$q%'");
        return $qb->getQuery();
    }
    
    public function fulltextQuery($q) {
        $qb = $this->createQueryBuilder('e');
        $qb->addSelect("MATCH_AGAINST (e.name, :q 'IN BOOLEAN MODE') as score");
        $qb->add('where', "MATCH_AGAINST (e.name, :q 'IN BOOLEAN MODE') > 0.5");
        $qb->orderBy('score', 'desc');
        $qb->setParameter('q', $q);
        return $qb->getQuery();
    }
    
    public function buildSearchQuery($data) {
        $qb = $this->createQueryBuilder('e');
        if(isset($data['name']) && $data['name']) {            
            $qb->add('where', "MATCH_AGAINST (e.name, :name 'IN BOOLEAN MODE') > 0");
            $qb->setParameter('name', $data['name']);
        }
        if(isset($data['address']) && $data['address']) {            
            $qb->add('where', "MATCH_AGAINST (e.streetAddress, :address 'IN BOOLEAN MODE') > 0");
            $qb->setParameter('address', $data['address']);
        }
        if (isset($data['city']) && $data['city']) {
            $qb->innerJoin('e.city', 'c');
            $qb->andWhere('MATCH_AGAINST(c.alternatenames, c.name, :cname) > 0');
            $qb->setParameter('cname', $data['city']);
        }
        
        if (isset($data['start']) && $data['start']) {
            $m = array();
            if (preg_match('/^\s*[0-9]{4}\s*$/', $data['start'])) {
                $qb->andWhere('YEAR(e.startDate) = :yearb');
                $qb->setParameter('yearb', $data['start']);
            } else if (preg_match('/^\s*(\*|[0-9]{4})\s*-\s*(\*|[0-9]{4})\s*$/', $data['start'], $m)) {
                $from = ($m[1] === '*' ? -1 : $m[1]);
                $to = ($m[2] === '*' ? 9999 : $m[2]);
                $qb->andWhere(':fromb <= YEAR(e.startDate) AND YEAR(e.startDate) <= :tob');
                $qb->setParameter('fromb', $from);
                $qb->setParameter('tob', $to);
            }
        }

        if (isset($data['end']) && $data['end']) {
            $m = array();
            if (preg_match('/^\s*[0-9]{4}\s*$/', $data['end'])) {
                $qb->andWhere('YEAR(e.endDate) = :yeare');
                $qb->setParameter('yeare', $data['end']);
            } else if (preg_match('/^\s*(\*|[0-9]{4})\s*-\s*(\*|[0-9]{4})\s*$/', $data['end'], $m)) {
                $from = ($m[1] === '*' ? -1 : $m[1]);
                $to = ($m[2] === '*' ? 9999 : $m[2]);
                $qb->andWhere(':frome <= YEAR(e.endDate) AND YEAR(e.endDate) <= :toe');
                $qb->setParameter('frome', $from);
                $qb->setParameter('toe', $to);
            }
        }
        return $qb->getQuery();
    }
    
    public function random($limit) {
        $qb = $this->createQueryBuilder('e');
        $qb->orderBy('RAND()');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->execute();
    }
}
